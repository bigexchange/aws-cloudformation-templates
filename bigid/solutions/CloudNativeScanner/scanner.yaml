AWSTemplateFormatVersion: 2010-09-09
Conditions:
  IsNer: !Equals
    - !Ref NerEnabled
    - true
  IsScannerOnly: !Equals
    - !Ref NerEnabled
    - false
<<<<<<< HEAD
  ShouldAttachManagedPolicy: !Equals [!Ref AttachManagedPolicy, "true"]
=======
<<<<<<< HEAD
  ShouldAttachManagedPolicy:
    !And
      - !Equals [ !Ref AttachManagedPolicy, "true" ]
      - !Not [ !Equals [ !Ref ManagedPolicyArn, "" ] ]
  ShouldCreateRefreshTokenSecret:
    !And
      - !Equals [!Ref BigIDRefreshSecretArn, ""]
      - !Not [!Equals [!Ref BigIDRefreshToken, ""]]
=======
  ShouldAttachManagedPolicy: !Equals [!Ref AttachManagedPolicy, "true"]
>>>>>>> 19a5f97 (CDK generation sanity check pipeline)
>>>>>>> 9e13ae4 (CDK generation sanity check pipeline)
Parameters:
  VpcID:
    Description: "The VPC ID to use for the ECS Task Definition."
    Type: AWS::EC2::VPC::Id
  SubnetName:
    Description: "The subnet name to use for the ECS Task Definition. Please provide the appropriate subnet ID."
    Type: AWS::EC2::Subnet::Id
  SecurityGroupName:
    Description: >-
      The name of the security group to use for the ECS Task Definition. Please provide the appropriate security group name and ensure the security group is in the same subnet.
    Type: String
    AllowedPattern: ".+"
  ImageTagVersion:
    Description: "The tag version of the scanner image."
    Type: String
    AllowedPattern: ".+"
  NerEnabled:
    Description: "Enable Named Entity Recognition (NER)."
    Type: String
    AllowedValues:
      - true
      - false
    Default: false
  ScannerCPU:
    Description: >-
      The amount of CPU units to allocate for the scanner. Use increments provided by Amazon (e.g., 256, 512, 1024, 2048).
    Type: Number
    Default: 8192
  ScannerMemory:
    Description: >-
      The amount of memory (in MB) to allocate for the scanner. Use increments provided by Amazon (e.g., 256, 512, 1024, 2048).
    Type: Number
    Default: 32768
  ScannerHostName:
    Description: "The hostname for the scanner."
    Type: String
    Default: remote-scanner
  ScannerGroupName:
    Description: "The group name for the scanner."
    Type: String
    Default: remote-scanner
  BigIDRefreshToken:
    NoEcho: true
    Description: "The refresh token for BigID."
    Type: String
  BigIDHostname:
    Description: "The hostname for BigID (e.g., test.bigid.cloud). Do not include the protocol (http:// or https://)."
    Type: String
    AllowedPattern: ".+"
  MaximumScannerCount:
    Description: "The maximum number of BigID scanner instances (replicas) to run."
    Type: String
    Default: "3"
  MinimumScannerCount:
    Description: "The minimum number of BigID scanner instances (replicas) to run."
    Type: String
    Default: "1"
  ScheduleExpression:
    Description: "The schedule expression for the scaling Lambda"
    Type: String
    Default: "rate(10 minutes)"
  AttachManagedPolicy:
    Description: "Indicate whether to attach a managed policy to the role."
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
  ManagedPolicyArn:
    Description: >-
      The ARN of the managed policy to attach to the role. Provide a value for this parameter only if 'AttachManagedPolicy' is set to 'true'.
    Type: String
    Default: ""

Resources:
  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: BigIDScannerCluster
  ScannerECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Condition: IsScannerOnly
    DependsOn:
      - RefreshTokenSecret
    Properties:
      ContainerDefinitions:
        - Name: bigid-scanner
          Essential: true
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bigid/bigid-scanner:${ImageTagVersion}"
          Environment:
            - Name: BIGID_REFRESH_TOKEN
              Value: '{{resolve:secretsmanager:bigid-scanner-token::::}}'
            - Name: BIGID_UI_HOST_EXT
              Value: !Sub "${BigIDHostname}"
            - Name: BIGID_UI_PORT_EXT
              Value: 443
            - Name: DISABLE_NFS_AUTOMOUNT
              Value: true
            - Name: IS_REMOTE_SCANNER
              Value: true
            - Name: SCANNER_HOST_NAME
              Value: !Sub "${ScannerHostName}"
            - Name: SCANNER_GROUP_NAME
              Value: !Sub "${ScannerGroupName}"
            - Name: RDS_SNAPSCAN_VPC_ID
              Value: !Ref VpcID
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: scanner-container
              awslogs-create-group: true
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: scannerlogs
          PortMappings:
            - ContainerPort: 9999
              HostPort: 9999
              Protocol: tcp
      Cpu: !Sub "${ScannerCPU}"
      Memory: !Sub "${ScannerMemory}"
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ECSIAMRole.Arn
      RequiresCompatibilities:
        - FARGATE
  ScannerWithNerECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Condition: IsNer
    DependsOn:
      - RefreshTokenSecret
    Properties:
      ExecutionRoleArn: !GetAtt ECSIAMRole.Arn
      ContainerDefinitions:
        - Name: bigid-scanner
          Essential: true
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bigid/bigid-scanner:${ImageTagVersion}"
          Environment:
            - Name: BIGID_REFRESH_TOKEN
              Value: '{{resolve:secretsmanager:bigid-scanner-token::::}}'
            - Name: BIGID_UI_HOST_EXT
              Value: !Sub "${BigIDHostname}"
            - Name: BIGID_UI_PORT_EXT
              Value: 443
            - Name: DISABLE_NFS_AUTOMOUNT
              Value: true
            - Name: IS_REMOTE_SCANNER
              Value: true
            - Name: BIGID_VERSION
              Value: !Sub "${ImageTagVersion}_AWS"
            - Name: SCANNER_HOST_NAME
              Value: !Sub "${ScannerHostName}"
            - Name: SCANNER_GROUP_NAME
              Value: !Sub "${ScannerGroupName}"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: scanner-container
              awslogs-create-group: true
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: scannerlogs
          PortMappings:
            - ContainerPort: 9999
              HostPort: 9999
              Protocol: tcp
        - Name: bigid-scanner-ner
          Essential: true
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bigid/bigid-ner:${ImageTagVersion}"
          Environment:
            - Name: BIGID_REFRESH_TOKEN
              Value: '{{resolve:secretsmanager:bigid-scanner-token::::}}'
            - Name: BIGID_UI_HOST_EXT
              Value: !Sub "${BigIDHostname}"
            - Name: BIGID_UI_PORT_EXT
              Value: 443
            - Name: DISABLE_NFS_AUTOMOUNT
              Value: true
            - Name: IS_REMOTE_SCANNER
              Value: true
            - Name: SCANNER_HOST_NAME
              Value: !Sub "${ScannerHostName}"
            - Name: SCANNER_GROUP_NAME
              Value: !Sub "${ScannerGroupName}"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: scanner-ner-container
              awslogs-create-group: true
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: scannerlogs
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
      Cpu: !Sub "${ScannerCPU}"
      Memory: !Sub "${ScannerMemory}"
      NetworkMode: awsvpc
      EphemeralStorage:
        SizeInGiB: 200
      RequiresCompatibilities:
        - FARGATE
  ECSScannerService:
    Type: "AWS::ECS::Service"
    Condition: IsScannerOnly
    Properties:
      ServiceName: bigid-scanner-service
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref MinimumScannerCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Sub "${SecurityGroupName}"
          Subnets:
            - !Sub "${SubnetName}"
      TaskDefinition: !Ref ScannerECSTaskDefinition

  ECSNERService:
    Condition: IsNer
    Type: "AWS::ECS::Service"
    Properties:
      ServiceName: bigid-scanner-service
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref MinimumScannerCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Sub "${SecurityGroupName}"
          Subnets:
            - !Sub "${SubnetName}"
      TaskDefinition: !Ref ScannerWithNerECSTaskDefinition
  ECSIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: BigIDScannerTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - !If
          - ShouldAttachManagedPolicy
          - !Ref ManagedPolicyArn
          - !Ref "AWS::NoValue"

  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: BigIDScannerTaskExecutionPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              [
                "ecr:GetAuthorizationToken",
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:CreateLogGroup",
                "logs:DescribeLogStreams",
                "iam:DeleteRolePolicy",
                "secretsmanager:GetSecretValue",
              ]
            Resource: "*"
      Roles:
        - !Ref ECSIAMRole
  ECSScalerLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: ECSScalerLambda
      Handler: ecs_scaler_lambda.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      ReservedConcurrentExecutions: 1
      Code:
        S3Bucket: !Sub bigid-ecs-lambda-scaler-${AWS::Region}
        S3Key: ecs-scaler-lambda-v1.0.2.zip
      Runtime: python3.11
  ECSScalerLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref ECSScalerLambda
      Description: v1.0.2
  LambdaEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ECSScalerLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRule.Arn
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: ECSScalerLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AWSCloudTrail_FullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
  EventBridgeRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: ECSScalerRule
      ScheduleExpression: !Ref ScheduleExpression # Schedule to trigger every 10 minutes
      State: ENABLED # Enable the rule
      Targets:
        - Arn: !GetAtt ECSScalerLambda.Arn
          Id: ECSScalerLambdaTarget
          InputTransformer:
            InputTemplate: !Join
              - ""
              - - '{"refresh_token_secret_id":"'
                - !Ref RefreshTokenSecret
                - '",'
                - '"host_name":"'
                - !Ref BigIDHostname
                - '",'
                - '"cluster_name":"'
                - !Ref ECSCluster
                - '",'
                - '"scanner_group":"'
                - !Ref ScannerGroupName
                - '",'
                - '"service_name":"bigid-scanner-service'
                - '",'
                - '"region_name":"'
                - !Ref "AWS::Region"
                - '",'
                - '"minimum_desired_count":"'
                - !Ref MinimumScannerCount
                - '",'
                - '"desired_count":"'
                - !Ref MaximumScannerCount
                - '"}'
  RefreshTokenSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: BigID Scanner Token
      Name: bigid-scanner-token
      SecretString:
        !Ref BigIDRefreshToken
      Tags:
        -
          Key: Name
          Value: scanner-refresh-token
