AWSTemplateFormatVersion: 2010-09-09

Conditions:
  IsNer: !Equals
    - !Ref NerEnabled
    - true
  IsScannerOnly: !Equals
    - !Ref NerEnabled
    - false
  ShouldCreateRefreshTokenSecret:
    Fn::And:
      - Fn::Not:
          - Fn::Equals:
              - Ref: BigIDRefreshToken
              - ""
      - Fn::Equals:
          - Ref: BigIDRefreshSecretArn
          - ""
  ShouldAttachManagedPolicy: !Equals [!Ref AttachManagedPolicy, "true"]
  IsCustomGroupName: !Equals [!Ref ScannerGroupOption, "Custom"]
  IsRegionGroupName: !Equals [!Ref ScannerGroupOption, "Region"]
  IsAccountIDGroupName: !Equals [!Ref ScannerGroupOption, "AccountID"]
  IsAccountIDRegionGroupName: !Equals [!Ref ScannerGroupOption, "AccountID-Region"]
  UseProxy:
    Fn::Or:
      - Fn::Not:
          - Fn::Equals:
              - !Ref HttpProxyHost
              - ""
      - Fn::Not:
          - Fn::Equals:
              - !Ref HttpProxyPort
              - ""
      - Fn::Not:
          - Fn::Equals:
              - !Ref HttpsProxyHost
              - ""
      - Fn::Not:
          - Fn::Equals:
              - !Ref HttpsProxyPort
              - ""
  IsLabelerEnabled: !Equals [!Ref LabelerEnabled, "true"]
  CreateProxyCertSecret: !Equals [!Ref CreateProxyCertificateSecret, "true"]
  HasProxyCACertValue: !Not [!Equals [!Ref ProxyCACertValue, ""]]
  HasProxyPrivateCertValue: !Not [!Equals [!Ref ProxyPrivateCertValue, ""]]
  HasProxyPublicCertValue: !Not [!Equals [!Ref ProxyPublicCertValue, ""]]
  ShouldCreateProxyCertSecret: !Equals [!Ref CreateProxyCertificateSecret, "true"]
  UseProvidedProxyCertArn: !Not [!Equals [!Ref ProxyCertArn, ""]]

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Scanner Configuration"
        Parameters:
          - ScannerRepository
          - ImageTagVersion
          - BigIDRefreshToken
          - BigIDRefreshSecretArn
          - BigIDUIProtocol
          - BigIDHostname
          - ScannerGroupOption
          - ScannerCPU
          - ScannerMemory
          - CustomScannerGroupName
          - MaximumScannerCount
          - MinimumScannerCount
          - ScheduleExpression
          - CustomScheduleMinutes

      - Label:
          default: "NER Configuration"
        Parameters:
          - NerEnabled
          - NerRepository
      - Label:
          default: "Labeler Configuration"
        Parameters:
          - LabelerEnabled
          - LabelerRepository
      - Label:
          default: "Scanner ARN Policy Configuration"
        Parameters:
          - AttachManagedPolicy
          - ManagedPolicyArn
      - Label:
          default: "Scanner and Lambda Network Configuration"
        Parameters:
          - VpcID
          - Subnet1
          - Subnet2
          - Subnet3
          - SecurityGroupName
      - Label:
          default: "Scanner / Lambda Network Proxy Configuration"
        Parameters:
          - AssignPublicIp
          - HttpsProxyHost
          - HttpsProxyPort
          - HttpProxyHost
          - HttpProxyPort

Parameters:
  VpcID:
    Description: "The VPC ID to use for the ECS Task Definition for the Scanner and Scaler"
    Type: AWS::EC2::VPC::Id
    MinLength: 1
    ConstraintDescription: "VpcID must not be empty."
  Subnet1:
    Description: "The first subnet ID to use for the ECS Task Definition for the Scaler and for the Lambda. These will need to be configured privately with VPC Endpoints or Subnet with an NAT, NOTE: do not use a IGW"
    Type: AWS::EC2::Subnet::Id
    MinLength: 1
    ConstraintDescription: "Subnet1 must not be empty."
  Subnet2:
    Description: "The second subnet ID to use for the ECS Task Definition for the Scaler and for the Lambda. These will need to be configured privately with VPC Endpoints or Subnet with an NAT, NOTE: do not use a IGW"
    Type: AWS::EC2::Subnet::Id
    MinLength: 1
    ConstraintDescription: "Subnet2 must not be empty."
  Subnet3:
    Description: "The third subnet ID to use for the ECS Task Definition for the Scaler and for the Lambda. These will need to be configured privately with VPC Endpoints or Subnet with an NAT, NOTE: do not use a IGW"
    Type: AWS::EC2::Subnet::Id
    MinLength: 1
    ConstraintDescription: "Subnet3 must not be empty."
  SecurityGroupName:
    Description: "The name of the security group to use for the ECS Task Definition for the Scaler. This will require egress over port 443"
    Type: AWS::EC2::SecurityGroup::Id
    MinLength: 1
    ConstraintDescription: "SecurityGroupName must not be empty."
  ImageTagVersion:
    Description: "The tag of the release, please make sure your images versions correctly tagged. E.G: release-123.45"
    Type: String
    AllowedPattern: ".+"
  ScannerGroupOption:
    Type: String
    Default: "Custom"
    AllowedValues:
      - Region
      - AccountID
      - AccountID-Region
      - Custom
    Description: "Option to set the Scanner Group Name. Custom: will be whatever the custom value set is. Region: Will be named after the region the scanner is deploying in. AccountID: Will be the account ID of the account the scanner is located in. AccountID-Region: Will be the AccountID-Region the scanner is currently deployed in"
  NerEnabled:
    Description: "Enable Named Entity Recognition (NER)."
    Type: String
    AllowedValues:
      - true
      - false
    Default: false
  ScannerCPU:
    Description: "The amount of CPU units to allocate for the scanner. Use increments provided by Amazon (e.g., 256, 512, 1024, 2048)."
    Type: Number
    Default: 8192
  ScannerMemory:
    Description: "The amount of memory (in MB) to allocate for the scanner. Use increments provided by Amazon (e.g., 256, 512, 1024, 2048)."
    Type: Number
    Default: 32768
  CustomScannerGroupName:
    Description: "The Scanner Group Name if Custom option is selected."
    Type: String
    Default: remote-scanner
  BigIDRefreshToken:
    NoEcho: true
    Description: "The refresh token for BigID. This will create an AWS Secret in Secrets Manager which will be referenced in the deployment."
    Type: String
    AllowedPattern: "^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+$"
    ConstraintDescription: "The token must be a valid JWT token."
  BigIDRefreshSecretArn:
    Type: String
    Description: "The ARN of the existing secret to use for BigID Scanner Token (Optional). You will need to have created an AWS Secret and specify it with the full ARN for the secret."
  BigIDHostname:
    Description: "The hostname for BigID (e.g., test.bigid.cloud). Please DO NOT include the protocol (http:// or https://)."
    Type: String
    AllowedPattern: ".+"
  BigIDUIProtocol:
    Description: "The protocol to connect to  BigID UI (either HTTP or HTTPS)."
    Type: String
    AllowedValues:
      - http
      - https
    Default: https
  MaximumScannerCount:
    Description: "The maximum number of BigID scanner instances (replicas) to run."
    Type: Number
    Default: 3
  MinimumScannerCount:
    Description: "The minimum number of scanner replicas. To scale from 0, set VALIDATE_SCANNER_GROUP=false for Orch in the BigID UI."
    Type: Number
    Default: 1
  ScheduleExpression:
    Description: "The schedule expression for the scaling Lambda. Choose from predefined rates or select 'custom' to specify your own rate in minutes."
    Type: String
    Default: "rate(10 minutes)"
    AllowedValues:
      - "rate(1 minute)"
      - "rate(5 minutes)"
      - "rate(10 minutes)"
      - "rate(30 minutes)"
      - "rate(1 hour)"
  AttachManagedPolicy:
    Description: "Indicate whether to attach a managed policy to the role. This policy is a requirement. If you have an external policy to attach directly to the scanner role to allow it to scan resources inside/outside the account, this is optional."
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
  ManagedPolicyArn:
    Description: "The ARN of the managed policy to attach to the role. Provide a value for this parameter only if 'AttachManagedPolicy' is set to 'true'."
    Type: String
  ScannerRepository:
    Description: "The full replacement repository URL for the scanner (excluding tag), Example: 1234567890.dkr.ecr.us-east-1.amazonaws.com/bigid/bigid-scanner"
    Type: String
    AllowedPattern: "^[^:]*$"
    ConstraintDescription: "The repository URL must not include a tag (e.g., :latest)."
  NerRepository:
    Description: "The full replacement repository URL for the NER scanner (excluding tag), Example: 1234567890.dkr.ecr.us-east-1.amazonaws.com/bigid/bigid-ner"
    Type: String
    AllowedPattern: "^[^:]*$"
    ConstraintDescription: "The repository URL must not include a tag (e.g., :latest)."
  LabelerRepository:
    Description: "The full replacement repository URL for the labeler (excluding tag), Example: 1234567890.dkr.ecr.us-east-1.amazonaws.com/bigid/bigid-labeler"
    Type: String
    AllowedPattern: "^[^:]*$"
    ConstraintDescription: "The repository URL must not include a tag (e.g., :latest)."
  AssignPublicIp:
    Description: "If set to DISABLED, scanners won't have public IPs. Ensure a NAT or IGW is configured for egress. This Public IP allocation is specifically for allowing ECS Service to be assigned a public IP address."
    Type: String
    Default: "ENABLED"
    AllowedValues:
      - "ENABLED"
      - "DISABLED"
  HttpsProxyHost:
    Type: String
    Description: "If utilizing an HTTPS Proxy, specify so your scanner/scaler can reach out to the internet using a proxy instance. You will need to specify the string as http://your.proxy.example.com:$PORT_NUMBER. It must use the HTTP protocol; do not change to HTTPS."
  HttpsProxyPort:
    Type: String
    Description: "Port that will be appended to your proxy string http://your.proxy.example.com:$PORT_NUMBER."
  HttpProxyHost:
    Type: String
    Description: "If utilizing an HTTP Proxy, specify so your scanner/scaler can reach out to the internet using a proxy instance. You will need to specify the string as http://your.proxy.example.com:$PORT_NUMBER."
  HttpProxyPort:
    Type: String
    Description: "Port that will be appended to your proxy string http://your.proxy.example.com:$PORT_NUMBER."
  LabelerEnabled:
    Description: "Enable Labeler."
    Type: String
    AllowedValues:
      - true
      - false
    Default: false
  ProxyCertArn:
    Description: "The ARN of the existing certificate secret in Secrets Manager"
    Type: String
    Default: ""
  ProxyCACertKey:
    Description: "Name of the Proxy CA Certificate Key. This key will be used to reference the secret in the secret file. For example: caCert: <ProxyCACertValue>"
    Type: String
    Default: "caCert"
  ProxyCACertValue:
    Description: "The CA certificate content to store in Secrets Manager (if not already created)"
    Type: String
    NoEcho: true
  ProxyPrivateCertKey:
    Description: "Name of the Proxy Private Certificate Key. This key will be used to reference the secret in the secret file. For example: privateCert: <ProxyPrivateCertValue>"
    Type: String
    Default: "privateCert"
  ProxyPrivateCertValue:
    Description: "Private Proxy Certificate Contents"
    Type: String
    NoEcho: true
  ProxyPublicCertKey:
    Description: "Name of the Proxy Public Certificate Key. This key will be used to reference the secret in the secret file. For example: publicCert: <ProxyPublicCertValue>"
    Type: String
    Default: "publicCert"
  ProxyPublicCertValue:
    Description: "Private Proxy Certificate Contents"
    Type: String
    NoEcho: true
  CreateProxyCertificateSecret:
    Description: "Specify whether to create the Proxy Certificate Secret"
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

Resources:
  RefreshTokenSecret:
    Type: AWS::SecretsManager::Secret
    Condition: ShouldCreateRefreshTokenSecret
    Properties:
      Description: !Sub "${AWS::StackName} Scanner Token"
      SecretString: !Ref BigIDRefreshToken

  ProxyCertificateSecret:
    Type: AWS::SecretsManager::Secret
    Condition: CreateProxyCertSecret
    Properties:
      Name: !Sub "${AWS::StackName}-proxy-certificates"
      Description: "Certificates for Proxy Authorization / Authentication"
      SecretString: !Join
        - ""
        - - "{"
          - !If
            - HasProxyCACertValue
            - !Sub "\"${ProxyCACertKey}\": \"${ProxyCACertValue}\""
            - !Ref "AWS::NoValue"
          - !If
            - HasProxyCACertValue
            - !If
              - HasProxyPrivateCertValue
              - ","
              - !If
                - HasProxyPublicCertValue
                - ","
                - ""
            - !Ref "AWS::NoValue"
          - !If
            - HasProxyPrivateCertValue
            - !Sub "\"${ProxyPrivateCertKey}\": \"${ProxyPrivateCertValue}\""
            - !Ref "AWS::NoValue"
          - !If
            - HasProxyPrivateCertValue
            - !If
              - HasProxyPublicCertValue
              - ","
              - ""
            - !Ref "AWS::NoValue"
          - !If
            - HasProxyPublicCertValue
            - !Sub "\"${ProxyPublicCertKey}\": \"${ProxyPublicCertValue}\""
            - !Ref "AWS::NoValue"
          - "}"
  ECSCluster:
    Type: "AWS::ECS::Cluster"

  ScannerECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Condition: IsScannerOnly
    Properties:
      ContainerDefinitions:
        - Name: bigid-scanner
          Essential: true
          Image: !If
            - IsLabelerEnabled
            - !Sub "${LabelerRepository}:${ImageTagVersion}"
            - !Sub "${ScannerRepository}:${ImageTagVersion}"
          Environment:
            - Name: BIGID_UI_HOST_EXT
              Value: !Sub "${BigIDHostname}"
            - Name: BIGID_UI_PORT_EXT
              Value: 443
            - Name: BIGID_UI_PROTOCOL_EXT
              Value: !Ref BigIDUIProtocol
            - Name: DISABLE_NFS_AUTOMOUNT
              Value: true
            - Name: IS_REMOTE_SCANNER
              Value: true
            - Name: SCANNER_JAVA_OPTS
              Value: !Sub |
                -Dhttp.proxyHost=${HttpProxyHost} -Dhttp.proxyPort=${HttpProxyPort} -Dhttp.nonProxyHosts=localhost -Xmx${ScannerMemory}m -Dhttps.proxyHost=${HttpsProxyHost} -Dhttps.proxyPort=${HttpsProxyPort} -Djavax.net.ssl.trustStore=/etc/ssl/certs/truststore.jks
            - Name: SCANNER_HOST_NAME
              Value: !Sub "bigid-scanner-${AWS::StackName}"
            - Name: SCANNER_GROUP_NAME
              Value: !If
                - IsCustomGroupName
                - !Ref CustomScannerGroupName
                - !If
                    - IsRegionGroupName
                    - !Sub "${AWS::Region}"
                    - !If
                        - IsAccountIDGroupName
                        - !Ref "AWS::AccountId"
                        - !If
                            - IsAccountIDRegionGroupName
                            - !Sub "${AWS::AccountId}-${AWS::Region}"
                            - !Ref "AWS::NoValue"
            - Name: RDS_SNAPSCAN_VPC_ID
              Value: !Ref VpcID
            - !If
              - UseProxy
              - Name: SCANNER_JAVA_OPTS
                Value: !Sub "-Dhttp.proxyHost=${HttpProxyHost} -Dhttp.proxyPort=${HttpProxyPort} -Dhttp.nonProxyHosts=localhost -Xmx${ScannerMemory}m -Dhttps.proxyHost=${HttpsProxyHost} -Dhttps.proxyPort=${HttpsProxyPort}"
              - !Ref "AWS::NoValue"
          Secrets: 
            - Name: BIGID_REFRESH_TOKEN
              ValueFrom: !If
                - ShouldCreateRefreshTokenSecret
                - !Ref RefreshTokenSecret
                - !Ref BigIDRefreshSecretArn
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: scanner
          PortMappings:
            - ContainerPort: 9999
              HostPort: 9999
              Protocol: tcp
          MountPoints:
            - SourceVolume: truststore-volume
              ContainerPath: /etc/ssl/certs
        - !If
            - ShouldCreateProxyCertSecret
            - Name: truststore-sidecar
              Essential: true
              Image: amazonlinux:2
              EntryPoint: ["sh", "-c"]
              Command:
                - |
                  set -x && \
                  yum install -y java-1.8.0-openjdk openssl && \
                  mkdir -p ./certs && \
                  convert_to_pem() {
                    local cert_var="$1"
                    local cert_content="$2"
                    local cert_file="./certs/${cert_var}.pem"
                    echo "Processing $cert_var"
                    if [ -n "$cert_content" ]; then
                      echo "Creating $cert_file with content from $cert_var"
                      # Ensure the PEM header and footer are on their own lines and replace \n with actual newlines
                      if [ "$cert_var" == "PROXY_PRIVATE_CERT" ]; then
                        formatted_cert=$(echo "$cert_content" | sed 's/-----BEGIN PRIVATE KEY-----/-----BEGIN PRIVATE KEY-----\n/' | sed 's/-----END PRIVATE KEY-----/\n-----END PRIVATE KEY-----/' | sed 's/\\n/\n/g')
                      else
                        formatted_cert=$(echo "$cert_content" | sed 's/-----BEGIN CERTIFICATE-----/-----BEGIN CERTIFICATE-----\n/' | sed 's/-----END CERTIFICATE-----/\n-----END CERTIFICATE-----/' | sed 's/\\n/\n/g')
                      fi
                      echo "$formatted_cert" > "$cert_file"
                    else
                      echo "$cert_var not found"
                    fi
                  } && \
                  convert_to_pem "PROXY_PUBLIC_CERT" "$PROXY_PUBLIC_CERT" && \
                  convert_to_pem "PROXY_PRIVATE_CERT" "$PROXY_PRIVATE_CERT" && \
                  convert_to_pem "PROXY_CA_CERT" "$PROXY_CA_CERT" && \
                  # Check if public and private certificates are present
                  if [ -f "./certs/PROXY_PUBLIC_CERT.pem" ] && [ -f "./certs/PROXY_PRIVATE_CERT.pem" ]; then
                    echo "Creating PKCS12 file with PROXY_PUBLIC_CERT and PROXY_PRIVATE_CERT" && \
                    # Combine the private key and public certificate into a PKCS12 file
                    openssl pkcs12 -export -out ./certs/proxy_cert.p12 -inkey ./certs/PROXY_PRIVATE_CERT.pem -in ./certs/PROXY_PUBLIC_CERT.pem -name proxy_cert -CAfile ./certs/PROXY_CA_CERT.pem -caname root -passout pass:changeit && \
                    echo "Importing PKCS12 file into Java KeyStore" && \
                    # Import the PKCS12 file into the Java KeyStore
                    keytool -importkeystore -destkeystore ./certs/truststore.jks -srckeystore ./certs/proxy_cert.p12 -srcstoretype PKCS12 -alias proxy_cert -deststorepass changeit -srcstorepass changeit -noprompt
                  else
                    echo "PROXY_PUBLIC_CERT or PROXY_PRIVATE_CERT is missing, skipping PKCS12 creation"
                  fi && \
                  # Import the CA certificate into the Java KeyStore if present
                  if [ -f "./certs/PROXY_CA_CERT.pem" ]; then
                    echo "Importing CA certificate into Java KeyStore" && \
                    keytool -importcert -file ./certs/PROXY_CA_CERT.pem -keystore ./certs/truststore.jks -storepass changeit -noprompt -alias ca_cert
                  else
                    echo "PROXY_CA_CERT is missing, skipping CA certificate import"
                  fi && \
                  # Output the contents of the truststore to verify
                  echo "Listing contents of the Java KeyStore" && \
                  keytool -list -keystore ./certs/truststore.jks -storepass changeit
              Environment:
                - !If
                    - HasProxyPublicCertValue
                    - Name: PROXY_PUBLIC_CERT
                      Value: !Ref ProxyPublicCertValue
                    - !Ref "AWS::NoValue"
                - !If
                    - HasProxyPrivateCertValue
                    - Name: PROXY_PRIVATE_CERT
                      Value: !Ref ProxyPrivateCertValue
                    - !Ref "AWS::NoValue"
                - !If
                    - HasProxyCACertValue
                    - Name: PROXY_CA_CERT
                      Value: !Ref ProxyCACertValue
                    - !Ref "AWS::NoValue"
              MountPoints:
                - SourceVolume: truststore-volume
                  ContainerPath: /certs
              LogConfiguration:
                LogDriver: awslogs
                Options:
                  awslogs-group: !Ref LogGroup
                  awslogs-region: !Sub ${AWS::Region}
                  awslogs-stream-prefix: sidecar
            - !Ref "AWS::NoValue"
      Cpu: !Sub "${ScannerCPU}"
      Memory: !Sub "${ScannerMemory}"
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ECSIAMRole.Arn
      RequiresCompatibilities:
        - FARGATE
      Volumes:
        - Name: truststore-volume
          Host: {}

  ScannerWithNerECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Condition: IsNer
    Properties:
      ExecutionRoleArn: !GetAtt ECSIAMRole.Arn
      ContainerDefinitions:
        - Name: bigid-scanner
          Essential: true
          Image: !If
            - IsLabelerEnabled
            - !Sub "${LabelerRepository}:${ImageTagVersion}"
            - !Sub "${ScannerRepository}:${ImageTagVersion}"
          Environment:
            - Name: BIGID_UI_HOST_EXT
              Value: !Sub "${BigIDHostname}"
            - Name: BIGID_UI_PORT_EXT
              Value: 443
            - Name: BIGID_UI_PROTOCOL_EXT
              Value: !Ref BigIDUIProtocol
            - Name: DISABLE_NFS_AUTOMOUNT
              Value: true
            - Name: IS_REMOTE_SCANNER
              Value: true
            - !If
              - UseProxy
              - Name: SCANNER_JAVA_OPTS
                Value: !Sub "-Dhttp.proxyHost=${HttpProxyHost} -Dhttp.proxyPort=${HttpProxyPort} -Dhttp.nonProxyHosts=localhost -Xmx${ScannerMemory}m -Dhttps.proxyHost=${HttpsProxyHost} -Dhttps.proxyPort=${HttpsProxyPort}"
              - !Ref "AWS::NoValue"
            - Name: BIGID_VERSION
              Value: !Sub "${ImageTagVersion}_AWS"
            - Name: SCANNER_HOST_NAME
              Value: !Sub "bigid-scanner-${AWS::StackName}"
            - Name: SCANNER_GROUP_NAME
              Value: !If
                - IsCustomGroupName
                - !Ref CustomScannerGroupName
                - !If
                    - IsRegionGroupName
                    - !Sub "${AWS::Region}"
                    - !If
                        - IsAccountIDGroupName
                        - !Ref "AWS::AccountId"
                        - !If
                            - IsAccountIDRegionGroupName
                            - !Sub "${AWS::AccountId}-${AWS::Region}"
                            - !Ref "AWS::NoValue"
            - Name: RDS_SNAPSCAN_VPC_ID
              Value: !Ref VpcID
          Secrets: 
            !If
              - ShouldCreateRefreshTokenSecret
              - 
                - Name: BIGID_REFRESH_TOKEN
                  ValueFrom: !Ref RefreshTokenSecret
              - 
                - Name: BIGID_REFRESH_TOKEN
                  ValueFrom: !Ref BigIDRefreshSecretArn
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: !Sub bigid-scanner-${AWS::StackName}
          PortMappings:
            - ContainerPort: 9999
              HostPort: 9999
              Protocol: tcp
        - Name: bigid-ner
          Essential: true
          Image: !Sub "${NerRepository}:${ImageTagVersion}"
          Environment:
            - Name: BIGID_UI_HOST_EXT
              Value: !Sub "${BigIDHostname}"
            - Name: BIGID_UI_PORT_EXT
              Value: 443
            - Name: BIGID_UI_PROTOCOL_EXT
              Value: !Ref BigIDUIProtocol
            - Name: HTTP_PROXY
              Value: !If
                - UseProxy
                - !Sub "http://${HttpProxyHost}:${HttpProxyPort}"
                - !Ref "AWS::NoValue"
            - Name: HTTPS_PROXY
              Value: !If
                - UseProxy
                - !Sub "http://${HttpsProxyHost}:${HttpsProxyPort}"
                - !Ref "AWS::NoValue"
            - Name: DISABLE_NFS_AUTOMOUNT
              Value: true
            - Name: IS_REMOTE_SCANNER
              Value: true
            - Name: SCANNER_HOST_NAME
              Value: "localhost"
            - Name: SCANNER_GROUP_NAME
              Value: !If
                - IsCustomGroupName
                - !Ref CustomScannerGroupName
                - !If
                    - IsRegionGroupName
                    - !Sub "${AWS::Region}"
                    - !If
                        - IsAccountIDGroupName
                        - !Ref "AWS::AccountId"
                        - !If
                            - IsAccountIDRegionGroupName
                            - !Sub "${AWS::AccountId}-${AWS::Region}"
                            - !Ref "AWS::NoValue"
            - Name: RDS_SNAPSCAN_VPC_ID
              Value: !Ref VpcID
          Secrets: 
            !If
              - ShouldCreateRefreshTokenSecret
              - 
                - Name: BIGID_REFRESH_TOKEN
                  ValueFrom: !Ref RefreshTokenSecret
              - 
                - Name: BIGID_REFRESH_TOKEN
                  ValueFrom: !Ref BigIDRefreshSecretArn
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: !Sub bigid-scanner-${AWS::StackName}
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
      Cpu: !Sub "${ScannerCPU}"
      Memory: !Sub "${ScannerMemory}"
      NetworkMode: awsvpc
      EphemeralStorage:
        SizeInGiB: 200
      RequiresCompatibilities:
        - FARGATE

  ECSScannerService:
    Type: "AWS::ECS::Service"
    Condition: IsScannerOnly
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref MinimumScannerCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: !Ref AssignPublicIp
          SecurityGroups:
            - !Sub "${SecurityGroupName}"
          Subnets:
            - !Ref Subnet1
            - !Ref Subnet2
            - !Ref Subnet3
      TaskDefinition: !Ref ScannerECSTaskDefinition

  ECSNERService:
    Condition: IsNer
    Type: "AWS::ECS::Service"
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref MinimumScannerCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: !Ref AssignPublicIp
          SecurityGroups:
            - !Sub "${SecurityGroupName}"
          Subnets:
            - !Ref Subnet1
            - !Ref Subnet2
            - !Ref Subnet3
      TaskDefinition: !Ref ScannerWithNerECSTaskDefinition

  ECSIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - !If
          - ShouldAttachManagedPolicy
          - !Ref ManagedPolicyArn
          - !Ref "AWS::NoValue"

  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: BigIDScannerTaskExecutionPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              [
                "ecr:GetAuthorizationToken",
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:GetDownloadUrlForLayer",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:CreateLogGroup",
                "logs:DescribeLogStreams",
                "iam:DeleteRolePolicy",
                "secretsmanager:GetSecretValue",
              ]
            Resource: "*"
      Roles:
        - !Ref ECSIAMRole

  ECSScalerLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: ecs_scaler_lambda.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 120
      ReservedConcurrentExecutions: 1
      Code:
        S3Bucket: !Sub bigid-ecs-lambda-scaler-${AWS::Region}
        S3Key: ecs-scaler-lambda-v1.0.2.zip
      Runtime: python3.11
      VpcConfig:
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2
          - !Ref Subnet3
        SecurityGroupIds:
          - !Sub "${SecurityGroupName}"
  ECSScalerLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref ECSScalerLambda
      Description: v1.0.2

  LambdaEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ECSScalerLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRule.Arn

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: BigIDScannerPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  Fn::If:
                    - ShouldCreateRefreshTokenSecret
                    - !Ref RefreshTokenSecret
                    - !Ref BigIDRefreshSecretArn
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecs:UpdateService
                  - ecs:RegisterTaskDefinition
                  - ecs:DeregisterTaskDefinition
                  - ecs:DescribeServices
                  - ecs:DescribeTaskDefinition
                  - ecs:DescribeTasks
                  - ecs:CreateService
                  - ecs:DeleteService
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                  - ecr:DescribeRepositories
                  - ecr:GetAuthorizationToken
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"

  EventBridgeRule:
    Type: "AWS::Events::Rule"
    Properties:
      ScheduleExpression: !Ref ScheduleExpression
      State: ENABLED
      Targets:
        - Arn: !GetAtt ECSScalerLambda.Arn
          Id: ECSScalerLambdaTarget
          InputTransformer:
            InputTemplate: !Join
              - ""
              - - '{"refresh_token_secret_id":"'
                - !If 
                  - ShouldCreateRefreshTokenSecret
                  - !Ref RefreshTokenSecret
                  - !Ref BigIDRefreshSecretArn
                - '","cert_secret_arn":"'
                - !If
                  - UseProvidedProxyCertArn
                  - !Ref ProxyCertArn
                  - !If
                    - CreateProxyCertSecret
                    - !Ref ProxyCertificateSecret
                    - !Ref "AWS::NoValue"
                - '","ca_cert_key":"'
                - !Ref ProxyCACertKey
                - '","private_cert_key":"'
                - !Ref ProxyPrivateCertKey
                - '","public_cert_key":"'
                - !Ref ProxyPublicCertKey
                - '","host_name":"'
                - !Ref BigIDUIProtocol
                - '://'
                - !Ref BigIDHostname
                - '","cluster_name":"'
                - !Ref ECSCluster
                - '","scanner_group":"'
                - !If
                    - IsCustomGroupName
                    - !Ref CustomScannerGroupName
                    - !If
                        - IsRegionGroupName
                        - !Sub "${AWS::Region}"
                        - !If
                            - IsAccountIDGroupName
                            - !Ref "AWS::AccountId"
                            - !If
                                - IsAccountIDRegionGroupName
                                - !Sub "${AWS::AccountId}-${AWS::Region}"
                                - !Ref "AWS::NoValue"
                - '","service_name":"'
                - !If
                    - IsNer
                    - !Ref ECSNERService
                    - !Ref ECSScannerService
                - '","region_name":"'
                - !Ref "AWS::Region"
                - '","minimum_desired_count":'
                - !Ref MinimumScannerCount
                - ',"desired_count":'
                - !Ref MaximumScannerCount
                - ',"http_proxy_host":"'
                - !Ref HttpProxyHost
                - '","http_proxy_port":"'
                - !Ref HttpProxyPort
                - '","https_proxy_host":"'
                - !Ref HttpsProxyHost
                - '","https_proxy_port":"'
                - !Ref HttpsProxyPort
                - '"}'
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub bigid-scanner-${AWS::StackName}
