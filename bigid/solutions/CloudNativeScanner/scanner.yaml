AWSTemplateFormatVersion: 2010-09-09
Conditions:
  IsNer: !Equals
    - !Ref NerEnabled
    - true
  IsScannerOnly: !Equals
    - !Ref NerEnabled
    - false
Parameters:
  SubnetName:
    Description: "Subnet name for ECS Task Definition, please replace with the proper subnet"
    Type: String
    Default: ""
  SecurityGroupName:
    Description: >-
      Security Group Name for ECS Task Definition, please replace with the
      proper Security Group. Please also make sure the SG is in the same subnet
    Type: String
    Default: ""
  ImageRepository:
    Description: Default Image Repository for the ECS Scanner
    Type: String
    Default: ""
  ImageTagVersion:
    Type: String
    Description: Setting the tag version of the scanner
    Default: ""
  NerEnabled:
    Type: String
    AllowedValues:
      - true
      - false
    Description: Enable NER
    Default: false
  ScannerCPU:
    Type: Number
    Description: >-
      Scanner CPU Please use the increments provided by Amazon
      "256,512,1024,2048..etc"
    Default: 8192
  ScannerMemory:
    Type: Number
    Description: >-
      Scanner Memory Please use the increments provided by Amazon
      "256,512,1024,2048..etc"
    Default: 32768
  ScannerHostName:
    Type: String
    Description: >-
      Scanner Host Name
    Default: remote-scanner
  ScannerGroupName:
    Type: String
    Description: >-
      Scanner Group Name
    Default: remote-scanner
  NERCPU:
    Type: Number
    Description: >-
      Scanner CPU Please use the increments provided by Amazon
      "256,512,1024,2048..etc"
    Default: 4096
  NERMemory:
    Type: Number
    Description: >-
      NER Memory Please use the increments provided by Amazon
      "256,512,1024,2048..etc"
    Default: 8192
  BigIDRefreshToken:
    NoEcho: true
    Type: String
    Description: BigID Refresh Token
    Default: ""
  BigIDUIHostname:
    Type: String
    Description: BigID Tenant Host Name
    Default: ""
Resources:
  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: BigIDScannerCluster
  ScannerECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Condition: IsScannerOnly
    DependsOn: ECSIAMRole
    Properties:
      ContainerDefinitions:
        - Name: bigid-scanner
          Essential: true
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bigid-scanner:${ImageTagVersion}"
          Environment:
            - Name: BIGID_REFRESH_TOKEN
              Value: !Sub "${BigIDRefreshToken}"
            - Name: BIGID_UI_HOST_EXT
              Value: !Sub "${BigIDUIHostname}"
            - Name: BIGID_UI_PORT_EXT
              Value: 443
            - Name: DISABLE_NFS_AUTOMOUNT
              Value: true
            - Name: IS_REMOTE_SCANNER
              Value: true
            - Name: SCANNER_HOST_NAME
              Value: !Sub "${ScannerHostName}"
            - Name: SCANNER_GROUP_NAME
              Value: !Sub "${ScannerGroupName}"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: scanner-container
              awslogs-create-group: true
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: scannerlogs
          PortMappings:
            - ContainerPort: 9999
              HostPort: 9999
              Protocol: tcp
      Cpu: !Sub "${ScannerCPU}"
      Memory: !Sub "${ScannerMemory}"
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref ECSIAMRole
      RequiresCompatibilities:
        - FARGATE
  ScannerWithNerECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Condition: IsNer
    DependsOn: ECSIAMRole
    Properties:
      ExecutionRoleArn: !Ref ECSIAMRole
      ContainerDefinitions:
        - Name: bigid-scanner
          Essential: true
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bigid-scanner:${ImageTagVersion}"
          Environment:
            - Name: BIGID_REFRESH_TOKEN
              Value: !Sub "${BigIDRefreshToken}"
            - Name: BIGID_UI_HOST_EXT
              Value: !Sub "${BigIDUIHostname}"
            - Name: BIGID_UI_PORT_EXT
              Value: 443
            - Name: DISABLE_NFS_AUTOMOUNT
              Value: true
            - Name: IS_REMOTE_SCANNER
              Value: true
            - Name: BIGID_VERSION
              Value: !Sub "${ImageTagVersion}_AWS"
            - Name: SCANNER_HOST_NAME
              Value: !Sub "${ScannerHostName}"
            - Name: SCANNER_GROUP_NAME
              Value: !Sub "${ScannerGroupName}"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: scanner-container
              awslogs-create-group: true
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: scannerlogs
          PortMappings:
            - ContainerPort: 9999
              HostPort: 9999
              Protocol: tcp
        - Name: bigid-scanner-ner
          Essential: true
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bigid-ner:${ImageTagVersion}"
          Environment:
            - Name: BIGID_REFRESH_TOKEN
              Value: !Sub "${BigIDRefreshToken}"
            - Name: BIGID_UI_HOST_EXT
              Value: !Sub "${BigIDUIHostname}"
            - Name: BIGID_UI_PORT_EXT
              Value: 443
            - Name: DISABLE_NFS_AUTOMOUNT
              Value: true
            - Name: IS_REMOTE_SCANNER
              Value: true
            - Name: SCANNER_HOST_NAME
              Value: !Sub "${ScannerHostName}"
            - Name: SCANNER_GROUP_NAME
              Value: !Sub "${ScannerGroupName}"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: scanner-ner-container
              awslogs-create-group: true
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: scannerlogs
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
      Cpu: !Sub "${ScannerCPU}"
      Memory: !Sub "${ScannerMemory}"
      NetworkMode: awsvpc
      EphemeralStorage:
        SizeInGiB: 200
      RequiresCompatibilities:
        - FARGATE
  ECSScannerService:
    Type: "AWS::ECS::Service"
    Condition: IsScannerOnly
    Properties:
      ServiceName: bigid-scanner-service
      Cluster: !Ref ECSCluster
      DesiredCount: 0
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Sub "${SecurityGroupName}"
          Subnets:
            - !Sub "${SubnetName}"
      TaskDefinition: !Ref ScannerECSTaskDefinition

  ECSNERService:
    Condition: IsNer
    Type: "AWS::ECS::Service"
    Properties:
      ServiceName: bigid-scanner-service
      Cluster: !Ref ECSCluster
      DesiredCount: 0
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Sub "${SecurityGroupName}"
          Subnets:
            - !Sub "${SubnetName}"
      TaskDefinition: !Ref ScannerWithNerECSTaskDefinition

  ECSIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ecsTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
  RolePolicies:
    Type: AWS::IAM::Policy
    DependsOn: ECSIAMRole
    Properties:
      PolicyName: ecsTaskExecutionPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              [
                "ecr:GetAuthorizationToken",
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:CreateLogGroup",
                "logs:DescribeLogStreams",
                "iam:DeleteRolePolicy",
              ]
            Resource: "*"
      Roles:
        - !Ref ECSIAMRole

  ECSScalerLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: ECSScalerLambda
      PackageType: Image
      ImageConfig:
        ImageUri: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/my-ecr-repo:my-image-tag" # Replace with your ECR image URI
      Role: !GetAtt LambdaExecutionRole.Arn

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: ECSScalerLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistry_FullAccess

  EventBridgeRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: ECSScalerRule
      ScheduleExpression: "rate(10 minutes)" # Schedule to trigger every 10 minutes
      State: ENABLED # Enable the rule
      Targets:
        - Arn: !GetAtt ECSScalerLambda.Arn
          Id: ECSScalerLambdaTarget
      # Input transformer to provide the desired JSON parameters
      InputTransformer:
        InputPathsMap:
          refresh_token: !Ref BigIDRefreshToken
          host_name: !Ref BigIDUIHostname
          region_name: !Sub ${AWS::Region}
          cluster_name: !GetAtt ECSCluster.ClusterName # Use the ClusterName attribute of ECSCluster
        InputTemplate: |
          {
            "refresh_token": <refresh_token>,
            "host_name": <host_name>,
            "cluster_name": <cluster_name>,
            "service_name": bigid-scanner-service,
            "region_name": <region_name>,
            "desired_count": 3
          }
