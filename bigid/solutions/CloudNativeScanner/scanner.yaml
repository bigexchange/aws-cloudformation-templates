AWSTemplateFormatVersion: 2010-09-09
Conditions:
  IsNer: !Equals
    - !Ref NerEnabled
    - true
  IsScannerOnly: !Equals
    - !Ref NerEnabled
    - false
  ShouldAttachManagedPolicy:
    !And
      - !Equals [ !Ref AttachManagedPolicy, "true" ]
      - !Not [ !Equals [ !Ref ManagedPolicyArn, "" ] ]
Parameters:
  SubnetName:
    Description: "Subnet name for ECS Task Definition, please replace with the proper subnet"
    Type: String
    AllowedPattern: ".+"
  SecurityGroupName:
    Description: >-
      Security Group Name for ECS Task Definition, please replace with the
      proper Security Group. Please also make sure the SG is in the same subnet
    Type: String
    AllowedPattern: ".+"
  ImageTagVersion:
    Type: String
    Description: Setting the tag version of the scanner
    AllowedPattern: ".+"
  NerEnabled:
    Type: String
    AllowedValues:
      - true
      - false
    Description: Enable NER
    Default: false
  ScannerCPU:
    Type: Number
    Description: >-
      Scanner CPU Please use the increments provided by Amazon
      "256,512,1024,2048..etc"
    Default: 8192
  ScannerMemory:
    Type: Number
    Description: >-
      Scanner Memory Please use the increments provided by Amazon
      "256,512,1024,2048..etc"
    Default: 32768
  ScannerHostName:
    Type: String
    Description: >-
      Scanner Host Name
    Default: remote-scanner
  ScannerGroupName:
    Type: String
    Description: >-
      Scanner Group Name
    Default: remote-scanner
  NERCPU:
    Type: Number
    Description: >-
      Scanner CPU Please use the increments provided by Amazon
      "256,512,1024,2048..etc"
    Default: 4096
  NERMemory:
    Type: Number
    Description: >-
      NER Memory Please use the increments provided by Amazon
      "256,512,1024,2048..etc"
    Default: 8192
  BigIDRefreshToken:
    NoEcho: true
    Type: String
    Description: BigID Refresh Token
  BigIDHostname:
    Type: String
    Description: "E.G: test.bigid.cloud (Please Do Not Include the Protocol http:// or https://)"
    AllowedPattern: ".+"
  ScannerCount:
    Type: String
    Description: Maximum BigID Scanner Count(Maximum Replicas of Scanners)
    Default: "3"
  AttachManagedPolicy:
    Description: Whether to attach a managed policy
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
  ManagedPolicyArn:
    Description: The ARN of the managed policy to attach to the role ( Provide a value for this parameter only if 'AttachManagedPolicy' is set to 'true' )
    Type: String
    Default: ""

Resources:
  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: BigIDScannerCluster
  ScannerECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Condition: IsScannerOnly
    DependsOn:
      - RefreshTokenSecret
      - ECSIAMRole
    Properties:
      ContainerDefinitions:
        - Name: bigid-scanner
          Essential: true
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bigid/bigid-scanner:${ImageTagVersion}"
          Environment:
            - Name: BIGID_REFRESH_TOKEN
              Value: '{{resolve:secretsmanager:bigid-scanner-token::::}}'
            - Name: BIGID_UI_HOST_EXT
              Value: !Sub "${BigIDHostname}"
            - Name: BIGID_UI_PORT_EXT
              Value: 443
            - Name: DISABLE_NFS_AUTOMOUNT
              Value: true
            - Name: IS_REMOTE_SCANNER
              Value: true
            - Name: SCANNER_HOST_NAME
              Value: !Sub "${ScannerHostName}"
            - Name: SCANNER_GROUP_NAME
              Value: !Sub "${ScannerGroupName}"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: scanner-container
              awslogs-create-group: true
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: scannerlogs
          PortMappings:
            - ContainerPort: 9999
              HostPort: 9999
              Protocol: tcp
      Cpu: !Sub "${ScannerCPU}"
      Memory: !Sub "${ScannerMemory}"
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref ECSIAMRole
      RequiresCompatibilities:
        - FARGATE
  ScannerWithNerECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Condition: IsNer
    DependsOn:
      - RefreshTokenSecret
      - ECSIAMRole
    Properties:
      ExecutionRoleArn: !Ref ECSIAMRole
      ContainerDefinitions:
        - Name: bigid-scanner
          Essential: true
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bigid/bigid-scanner:${ImageTagVersion}"
          Environment:
            - Name: BIGID_REFRESH_TOKEN
              Value: '{{resolve:secretsmanager:bigid-scanner-token::::}}'
            - Name: BIGID_UI_HOST_EXT
              Value: !Sub "${BigIDHostname}"
            - Name: BIGID_UI_PORT_EXT
              Value: 443
            - Name: DISABLE_NFS_AUTOMOUNT
              Value: true
            - Name: IS_REMOTE_SCANNER
              Value: true
            - Name: BIGID_VERSION
              Value: !Sub "${ImageTagVersion}_AWS"
            - Name: SCANNER_HOST_NAME
              Value: !Sub "${ScannerHostName}"
            - Name: SCANNER_GROUP_NAME
              Value: !Sub "${ScannerGroupName}"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: scanner-container
              awslogs-create-group: true
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: scannerlogs
          PortMappings:
            - ContainerPort: 9999
              HostPort: 9999
              Protocol: tcp
        - Name: bigid-scanner-ner
          Essential: true
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bigid/bigid-ner:${ImageTagVersion}"
          Environment:
            - Name: BIGID_REFRESH_TOKEN
              Value: '{{resolve:secretsmanager:bigid-scanner-token::::}}'
            - Name: BIGID_UI_HOST_EXT
              Value: !Sub "${BigIDHostname}"
            - Name: BIGID_UI_PORT_EXT
              Value: 443
            - Name: DISABLE_NFS_AUTOMOUNT
              Value: true
            - Name: IS_REMOTE_SCANNER
              Value: true
            - Name: SCANNER_HOST_NAME
              Value: !Sub "${ScannerHostName}"
            - Name: SCANNER_GROUP_NAME
              Value: !Sub "${ScannerGroupName}"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: scanner-ner-container
              awslogs-create-group: true
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: scannerlogs
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
      Cpu: !Sub "${ScannerCPU}"
      Memory: !Sub "${ScannerMemory}"
      NetworkMode: awsvpc
      EphemeralStorage:
        SizeInGiB: 200
      RequiresCompatibilities:
        - FARGATE
  ECSScannerService:
    Type: "AWS::ECS::Service"
    Condition: IsScannerOnly
    Properties:
      ServiceName: bigid-scanner-service
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Sub "${SecurityGroupName}"
          Subnets:
            - !Sub "${SubnetName}"
      TaskDefinition: !Ref ScannerECSTaskDefinition

  ECSNERService:
    Condition: IsNer
    Type: "AWS::ECS::Service"
    Properties:
      ServiceName: bigid-scanner-service
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Sub "${SecurityGroupName}"
          Subnets:
            - !Sub "${SubnetName}"
      TaskDefinition: !Ref ScannerWithNerECSTaskDefinition

  ECSIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: BigIDScannerTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - !If
          - ShouldAttachManagedPolicy
          - !Ref ManagedPolicyArn
          - !Ref "AWS::NoValue" 

  RolePolicies:
    Type: AWS::IAM::Policy
    DependsOn: ECSIAMRole
    Properties:
      PolicyName: BigIDScannerTaskExecutionPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              [
                "ecr:GetAuthorizationToken",
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:CreateLogGroup",
                "logs:DescribeLogStreams",
                "iam:DeleteRolePolicy",
                "secretsmanager:GetSecretValue",
              ]
            Resource: "*"
      Roles:
        - !Ref ECSIAMRole
  ECSScalerLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: ECSScalerLambda
      Handler: ecs_scaler_lambda.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      ReservedConcurrentExecutions: 1
      Code:
        S3Bucket: !Sub bigid-ecs-lambda-scaler-${AWS::Region}
        S3Key: ecs-scaler-lambda-v1.0.1.zip
      Runtime: python3.11
  ECSScalerLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref ECSScalerLambda
      Description: v1.0.1
  LambdaEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ECSScalerLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRule.Arn
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: ECSScalerLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AWSCloudTrail_FullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
  EventBridgeRule:
    Type: "AWS::Events::Rule"
    DependsOn: RefreshTokenSecret
    Properties:
      Name: ECSScalerRule
      ScheduleExpression: "rate(10 minutes)" # Schedule to trigger every 10 minutes
      State: ENABLED # Enable the rule
      Targets:
        - Arn: !GetAtt ECSScalerLambda.Arn
          Id: ECSScalerLambdaTarget
          InputTransformer:
            InputTemplate: !Join
              - ""
              - - '{"refresh_token_secret_id":"'
                - !Ref RefreshTokenSecret
                - '",'
                - '"host_name":"'
                - !Ref BigIDHostname
                - '",'
                - '"cluster_name":"'
                - !Ref ECSCluster
                - '",'
                - '"scanner_group":"'
                - !Ref ScannerGroupName
                - '",'
                - '"service_name":"bigid-scanner-service'
                - '",'
                - '"region_name":"'
                - !Ref "AWS::Region"
                - '",'
                - '"desired_count":'
                - !Ref ScannerCount
                - "}"
  RefreshTokenSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: BigID Scanner Token
      Name: bigid-scanner-token
      SecretString: 
        !Ref BigIDRefreshToken
      Tags:
        -
          Key: Name
          Value: scanner-refresh-token
